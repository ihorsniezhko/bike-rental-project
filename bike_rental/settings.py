"""
Django settings for bike_rental project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
import sys

# Checks if an env.py file exists and import it.
if os.path.isfile('env.py'):
    import env  # noqa: F401

# Import messages constants
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Start with local hosts allowed by default.
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Add the Heroku hostname if the environment variable exists.
HEROKU_HOSTNAME = os.environ.get('HEROKU_HOSTNAME')
if HEROKU_HOSTNAME:
    ALLOWED_HOSTS.append(HEROKU_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required by allauth
    # 3rd Party Apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_summernote',
    'cloudinary',
    'cloudinary_storage',
    # Local App for general project files
    'core',
    'bikes',
    'rentals',
    'reviews',
    'profiles',
]

# Required by django-allauth
SITE_ID = 1

# For crispy_forms Bootstrap 5 styling
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #  Add allauth middleware
    'allauth.account.middleware.AccountMiddleware',
    # Add whitenoise middleware
    'whitenoise.middleware.WhiteNoiseMiddleware',

]

ROOT_URLCONF = 'bike_rental.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Update 'DIRS' key, look for templates in a 'templates' folder
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bike_rental.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
# }

# Connect to CI PostgreSQL database
DATABASES = {
   'default': dj_database_url.parse(os.environ.get("DATABASE_URL"))
}

# Use a faster in-memory SQLite database for tests if 'test' is in sys.argv
if 'test' in sys.argv:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        # ':memory:' tells SQLite to use an in-memory database
        'NAME': ':memory:',
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Message Tags map Django message levels to Bootstrap 5 alert classes.
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# URL where static files will be served from.
STATIC_URL = '/static/'
# Serving static files in production.
STATICFILES_STORAGE = (
    'whitenoise.storage.CompressedManifestStaticFilesStorage'
)

# Override storage for tests to avoid needing to run collectstatic
if 'test' in sys.argv:
    STATICFILES_STORAGE = (
        'django.contrib.staticfiles.storage.StaticFilesStorage'
    )

# Where look for static files.
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
# Gather static files for deployment.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Use Cloudinary for media files
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Default ModelBackend to log in to admin panel with username,
# and AuthenticationBackend to log in with email.
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Where to redirect users after they successfully log in.
LOGIN_REDIRECT_URL = '/'

# Where to redirect users after they log out.
LOGOUT_REDIRECT_URL = '/'

# Disable email verification (for project simplicity)
ACCOUNT_EMAIL_VERIFICATION = 'none'

# Points to custom form class.
ACCOUNT_SIGNUP_FORM_CLASS = 'profiles.forms.CustomSignupForm'

# Accept dd/mm/yyyy date format.
DATE_INPUT_FORMATS = ['%d/%m/%Y']

# Change date and time to European date format
USE_L10N = False
DATE_FORMAT = 'd/m/Y'
TIME_FORMAT = 'H:i'
DATETIME_FORMAT = 'd/m/Y H:i'

# Ensures the Summernote rich text editor is responsive.
SUMMERNOTE_CONFIG = {
    'summernote': {
        'width': '100%',
        'height': '480',
    },
}
